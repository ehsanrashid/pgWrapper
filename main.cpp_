#include <iostream>
#include <iostream>
#include <vector>
#include <string>
#include <optional>

#include "pg_wrapper.h"

using namespace pgwrap;


int main() {
    try {
        //pgwrap::Database db("postgresql://testuser:testpass@localhost:5432/testdb");
        pgwrap::Database db("localhost", "5432", "testdb", "testuser", "testpass");

        // Create test table
        db.exec(R"(
            CREATE TABLE IF NOT EXISTS test_nulls (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                age INTEGER,
                salary DECIMAL(10,2),
                notes TEXT
            )
        )");
        
        std::cout << "=== Different Ways to Handle NULL Values ===" << std::endl;
        
        // Method 1: Using std::optional (recommended)
        std::cout << "\n1. Using std::optional:" << std::endl;
        
        std::optional<int> null_age;  // Empty optional = NULL
        std::optional<double> null_salary;
        std::optional<std::string> null_notes;
        
        db.exec_params(
            "INSERT INTO test_nulls (name, age, salary, notes) VALUES ($1, $2, $3, $4)",
            "John Doe", 
            null_age,       // NULL
            null_salary,    // NULL  
            null_notes      // NULL
        );
        std::cout << "Inserted record with NULL values using std::optional" << std::endl;
        
        // Method 2: Using std::optional with values
        std::optional<int> valid_age = 30;
        std::optional<double> valid_salary = 50000.50;
        std::optional<std::string> valid_notes = "Good employee";
        
        db.exec_params(
            "INSERT INTO test_nulls (name, age, salary, notes) VALUES ($1, $2, $3, $4)",
            "Jane Smith",
            valid_age,
            valid_salary,
            valid_notes
        );
        std::cout << "Inserted record with valid values using std::optional" << std::endl;
        
        // Method 3: Using nullptr for pointer types (libpqxx specific)
        std::cout << "\n2. Using nullptr for C-style strings:" << std::endl;
        
        const char* null_string = nullptr;
        db.exec_params(
            "INSERT INTO test_nulls (name, age, salary, notes) VALUES ($1, $2, $3, $4)",
            "Bob Wilson",
            25,
            45000.00,
            null_string  // NULL
        );
        std::cout << "Inserted record with NULL string using nullptr" << std::endl;
        
        // Method 4: Explicit NULL in SQL (not recommended for parameterized queries)
        std::cout << "\n3. Using explicit NULL in SQL:" << std::endl;
        
        db.exec("INSERT INTO test_nulls (name, age, salary, notes) VALUES ('Alice Brown', NULL, NULL, NULL)");
        std::cout << "Inserted record with explicit NULL in SQL" << std::endl;
        
        // Method 5: Using transaction-level quote() for NULL values
        std::cout << "\n4. Using transaction quote() method:" << std::endl;
        
        auto txn = db.begin_transaction();
        std::string sql = "INSERT INTO test_nulls (name, age, salary, notes) VALUES (" +
                         txn.quote("Charlie Davis") + ", " +
                         "NULL" + ", " +  // Explicit NULL
                         "35000.75" + ", " +
                         "NULL" + ")";
        txn.exec(sql);
        txn.commit();
        std::cout << "Inserted record using transaction quote() method" << std::endl;
        
        // Now let's read the data and handle NULL values properly
        std::cout << "\n=== Reading and Handling NULL Values ===" << std::endl;
        
        auto result = db.exec("SELECT id, name, age, salary, notes FROM test_nulls ORDER BY id");
        
        for (const auto& row : result) {
            std::cout << "ID: " << row.get<int>("id") 
                      << ", Name: " << row.get<std::string>("name");
            
            // Method 1: Check if NULL before getting value
            if (!row.is_null("age")) {
                std::cout << ", Age: " << row.get<int>("age");
            } else {
                std::cout << ", Age: NULL";
            }
            
            // Method 2: Use get_optional (recommended)
            if (auto salary = row.get_optional<double>("salary")) {
                std::cout << ", Salary: $" << *salary;
            } else {
                std::cout << ", Salary: NULL";
            }
            
            // Method 3: Using get_optional with string
            if (auto notes = row.get_optional<std::string>("notes")) {
                std::cout << ", Notes: " << *notes;
            } else {
                std::cout << ", Notes: NULL";
            }
            
            std::cout << std::endl;
        }
        
        // Advanced NULL handling examples
        std::cout << "\n=== Advanced NULL Handling ===" << std::endl;
        
        // Update with NULL values
        std::optional<int> new_null_age;  // Empty = NULL
        db.exec_params(
            "UPDATE test_nulls SET age = $1 WHERE name = $2",
            new_null_age,
            "Jane Smith"
        );
        std::cout << "Updated Jane Smith's age to NULL" << std::endl;
        
        // Conditional NULL insertion
        bool should_set_notes = false;
        std::optional<std::string> conditional_notes = should_set_notes ? 
            std::make_optional(std::string("Has notes")) : 
            std::optional<std::string>{};
        
        db.exec_params(
            "INSERT INTO test_nulls (name, age, salary, notes) VALUES ($1, $2, $3, $4)",
            "David Lee",
            28,
            42000.00,
            conditional_notes
        );
        std::cout << "Inserted David Lee with conditional NULL notes" << std::endl;
        
        // Count NULL and non-NULL values
        auto null_count = db.exec("SELECT COUNT(*) as count FROM test_nulls WHERE age IS NULL");
        auto non_null_count = db.exec("SELECT COUNT(*) as count FROM test_nulls WHERE age IS NOT NULL");
        
        std::cout << "Records with NULL age: " << null_count.front().get<int>("count") << std::endl;
        std::cout << "Records with non-NULL age: " << non_null_count.front().get<int>("count") << std::endl;
        
        // Working with aggregates and NULL
        auto avg_result = db.exec("SELECT AVG(age) as avg_age, AVG(salary) as avg_salary FROM test_nulls");
        auto avg_row = avg_result.front();
        
        if (auto avg_age = avg_row.get_optional<double>("avg_age")) {
            std::cout << "Average age: " << *avg_age << std::endl;
        } else {
            std::cout << "Average age: NULL (no valid ages)" << std::endl;
        }
        
        if (auto avg_salary = avg_row.get_optional<double>("avg_salary")) {
            std::cout << "Average salary: $" << *avg_salary << std::endl;
        } else {
            std::cout << "Average salary: NULL (no valid salaries)" << std::endl;
        }
        
        // Clean up
        db.exec("DROP TABLE test_nulls");
        std::cout << "\nCleaned up test table" << std::endl;
    
        db.close();
    } catch (const pgwrap::DatabaseError& e) {
        std::cerr << "Database error: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}

